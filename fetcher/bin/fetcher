#!/usr/bin/env perl
use warnings;
use strict;
use lib '/opt/reader/lib';

use Reader::Model;
use Reader::Fetcher;

use DateTime;

use Readonly;
Readonly my $MAX_ITERATIONS => 10;

Readonly my %FETCH_INTERVALS => (
    very_low    => 1440,    # 1 day
    low         => 360,     # 6 hours
    normal      => 180,     # 3 hours
    high        => 60,      # 1 hour
    very_high   => 30,      # 30 minutes
);

my $model = Reader::Model::model;
my $queue = build_fetch_queue($model);

my $fetch_tag = calculate_fetch_tag();

my ($successful_fetches, $unsuccessful_fetches) = (0) x 2;

my $iteration_count = $MAX_ITERATIONS;
while ($iteration_count--) {
    my $fetch = pop_fetch_queue($queue);
    last unless $fetch;

    my $feed_id = $fetch->{feed}->id;
    print "Processing $feed_id\n";
    my $result = Reader::Fetcher::fetch($fetch->{feed}, $fetch_tag);

    if ($result) {
        print "[INFO] successfully fetched $feed_id\n";
        $fetch->{feed}->create_related('fetches', {
            fetch_date  => DateTime->now->epoch,
            filename    => "$feed_id.$fetch_tag.xml",
            status      => 'fetched',
        });
        $successful_fetches++;
    } else {
        print "[ERROR] error fetching $feed_id \n";
        $fetch->{feed}->create_related('fetches', {
            fetch_date  => DateTime->now->epoch,
            filename    => '',
            status      => 'error',
        });
        $unsuccessful_fetches++;
    }
}

$iteration_count = $successful_fetches + $unsuccessful_fetches;
print "[INFO] finished: ran $iteration_count / $MAX_ITERATIONS iterations ($successful_fetches succeeded)\n";

# YYYY_MM_DD_HH_MM when script started
sub calculate_fetch_tag {
    my (undef, $min, $hour, $day, $mon, $year) = localtime(time);
    return join '_', $year + 1900, map { sprintf "%02d", $_ } $mon, $day, $hour, $min;
}

sub build_fetch_queue {
    my $model = shift;
    my @unordered_queue;

    my @feeds = $model->resultset('Feed')->all;
    foreach my $feed (@feeds) {
        my $priority    = $feed->priority;
        my $last_fetch  = $feed->fetches->first;

        my $fetch_time = $last_fetch ? $last_fetch->fetch_date : 0;

        my $next_fetch = next_fetch($priority, $fetch_time);
        next unless DateTime->now->epoch > $next_fetch;

        push @unordered_queue, {
            feed        => $feed,
            last_fetch  => $fetch_time,
            next_fetch  => $next_fetch,
        };
    }

    my @ordered_queue = sort { $a->{next_fetch} <=> $b->{next_fetch} } @unordered_queue;

    return \@ordered_queue;
}

sub next_fetch {
    my ($priority, $last_fetch) = @_;
    return 0 unless $last_fetch;

    my $fetch_interval = $FETCH_INTERVALS{$priority};
    my $fetch_time = DateTime->from_epoch(epoch => $last_fetch);
    $fetch_time->add( minutes => $fetch_interval );
    return $fetch_time->epoch;
}

sub pop_fetch_queue {
    my $queue = shift;
    return shift @$queue;
}