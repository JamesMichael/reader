#!/usr/bin/env perl
use warnings;
use strict;
use lib '/opt/reader/lib';

use Reader::Parser;
use Reader::Model;

use File::Copy;
use Date::Parse;

use Readonly;
Readonly my $MAX_ITERATIONS => 10;
Readonly my $UNPARSED_DIR   => "/opt/reader/var/feeds/unparsed";
Readonly my $PARSED_DIR     => "/opt/reader/var/feeds/parsed";
Readonly my $ERROR_DIR      => "/opt/reader/var/feeds/error";

Readonly my $FEED_UNCHANGED => 0;
Readonly my $FEED_UPDATED   => 1;

Readonly my $ITEM_NEW       => 0;
Readonly my $ITEM_UNCHANGED => 1;
Readonly my $ITEM_UPDATED   => 2;
Readonly my $ITEM_ERROR     => 3;

my $model = Reader::Model::model;

my ($successful_parses, $unsuccessful_parses) = (0) x 2;

my $iteration_count = $MAX_ITERATIONS;
while ($iteration_count--) {

    my $fetch = get_next_fetch($model);
    last unless $fetch;

    # parse item
    my $filename = $UNPARSED_DIR . '/' . $fetch->filename;
    unless (-f $filename) {
        print "[ERROR] $filename does not exist\n";
        $unsuccessful_parses++;
        next;
    }

    my ($result, $header, $items) = Reader::Parser::parse($filename);

    unless ($result) {
        print "[ERROR] Could not parse feed: $filename\n";
        $fetch->status('error');
        $fetch->update;
        move_feed_to_error($fetch->filename);
        $unsuccessful_parses++;
        next;
    }

    my $feed = $model->resultset('Feed')->find($fetch->feed_id);
    unless ($feed) {
        print '[ERROR] Invalid feed ', $fetch->feed_id, "\n";
        $fetch->status('error');
        $fetch->update;
        move_feed_to_error($fetch->filename);
        $unsuccessful_parses++;
        next;
    }

    $result = update_feed($feed, $header);
    my $updated_feed_text = $result ? ' updated metadata' : '';

    my ($new_items, $updated_items, $unchanged_items, $error_items) = (0) x 4;
    foreach my $item (@$items) {
        $result = update_item($model, $feed, $item);

        $new_items++        if $result == $ITEM_NEW;
        $unchanged_items++  if $result == $ITEM_UNCHANGED;
        $updated_items++    if $result == $ITEM_UPDATED;
        $error_items++      if $result == $ITEM_ERROR;
    }

    print "[INFO] $filename: ($new_items, $updated_items, $unchanged_items, $error_items) $updated_feed_text\n";

    $fetch->status('parsed');
    $fetch->update;
    move_feed_to_parsed($fetch->filename);
    $successful_parses++;
}

$iteration_count = $successful_parses + $unsuccessful_parses;
print "[INFO] finished: ran $iteration_count / $MAX_ITERATIONS iterations ($successful_parses succeeded)\n";

sub get_next_fetch {
    my $model = shift;

    my $fetch = $model->resultset('Fetch')->search(
        {
            status  => 'fetched',
        },
        {
            order_by => { -asc => 'fetch_date' },
        }
    )->first;

    return unless $fetch;

    $fetch->status('parsing');
    $fetch->update;

    return $fetch;
}

sub update_feed {
    my ($feed, $data) = @_;

    $feed->title($data->{title});
    $feed->link(join ', ', @{$data->{links}});
    $feed->description($data->{description});
    $feed->author(join ', ', @{$data->{authors}});

    if ($feed->is_changed) {
        my %columns = $feed->get_dirty_columns;
        my $description = join ', ', map { "$_ => $columns{$_}" } keys %columns;
        $feed->update;
        return $FEED_UPDATED;
    } else {
        return $FEED_UNCHANGED;
    }
}

sub update_item {
    my ($model, $feed, $data) = @_;

    # check if item already exists
    my $unique_id = $data->{guid} || @{$data->{links}}[0];

    my $item = $model->resultset('Item')->search(
        {
            -and => [
                guid    => $unique_id,
                feed_id => $feed->id,
            ]
        }
    )->single;

    if ($item) {
        # update existing item
        $item->title($data->{title});
        $item->link(join ', ', @{$data->{links}});
        $item->content($data->{summary});

        if ($item->is_changed) {
            my %columns = $item->get_dirty_columns;
            my $description = join ', ', map { "$_ => $columns{$_}" } keys %columns;
            $item->update;
            return $ITEM_UPDATED;
        } else {
            return $ITEM_UNCHANGED;
        }
    } else {
        # insert new item
        my $state = $model->resultset('State')->search({
                'me.state' => 'unread',
        })->single;

        # convert stringy date to unix timestamp
        my $original_publish_date = str2time( $data->{published} );

        $item = $model->resultset('Item')->create({
            feed_id     => $feed->id,
            state_id    => $state->id,
            guid        => $unique_id,
            title       => $data->{title},
            link        => join(', ', @{$data->{links}}),
            content     => $data->{summary},
            published   => $original_publish_date,
        });

        if ($item) {
            return $ITEM_NEW;
        } else {
            print "[ERROR] FEED ", $feed->id, " ITEM ", $data->{title}, ": could not be added\n";
            return $ITEM_ERROR;
        }
    }

    return $item;
}

sub move_feed_to_error {
    my $filename = shift;

    my $original_path   = $UNPARSED_DIR . '/' . $filename;
    my $error_path      = $ERROR_DIR    . '/' . $filename;

    my $success = move($original_path, $error_path);
    print "Failed to move feed to error directory: $!\n" unless $success;
}

sub move_feed_to_parsed {
    my $filename = shift;

    my $original_path   = $UNPARSED_DIR . '/' . $filename;
    my $parsed_path     = $PARSED_DIR   . '/' . $filename;

    my $success = move($original_path, $parsed_path);
    print "Failed to move feed to error directory: $!\n" unless $success;
}