#!/usr/bin/env bash
# USAGE: build abc.spec

# RPMBUILD settings
RPMBUILD_DIR="${HOME}/rpmbuild"
BUILD_DIR="${RPMBUILD_DIR}/BUILD"
SOURCES_DIR="${RPMBUILD_DIR}/SOURCES"

SPECFILE=$1

# attempt to determine the specfile if not specified
if [ -z "$SPECFILE" ]
then
    shopt -s nullglob
    SPECFILES=(*.spec)

    if [ ${#SPECFILES[@]} -eq 0 ]
    then
        echo 'No specfiles found in the current directory' 1>&2
        echo "USAGE: $0 abc.spec" 1>&2
        exit 1
    fi

    if [ ${#SPECFILES[@]} -gt 1 ]
    then
        echo 'Too many specfiles found in current directory' 1>&2
        echo "USAGE: $0 abc.spec" 1>&2
        exit 1
    fi

    SPECFILE="${SPECFILES[0]}"
fi

if [ ! -f $SPECFILE ]
then
    echo "No such file: $SPECFILE" 1>&2
    exit 1
fi

if [ "$(dirname $SPECFILE)" != "." ]
then
    # could probably just pushd to the proper location instead
    echo 'build must be called from the same directory as the specfile is located' 1>&2
    exit 1
fi

# current working directory name
cwd=$(basename $(pwd))

# determine the file name for Source0 tarball
source0_template=$(grep '^Source0:' $SPECFILE | sed 's/^Source0:\s\+//')
source0_filename=$(rpm -q --specfile $SPECFILE --queryformat "$source0_template")

# build Source0 tarball of current directory
(cd ..; tar -czf "$source0_filename" "$cwd")

# copy Source0 to SOURCES
mv "../$source0_filename" "$SOURCES_DIR"

# build rpm
# rpmbuild is very verbose, so output to a file instead
rpmbuild -ba "$SPECFILE" &> build.log

# show the build log and quit on error
if [ $? -ne 0 ]
then
    less build.log
    exit 1;
fi

# tidy up after ourselves
rm build.log
rm "${SOURCES_DIR}/$source0_filename"
rm -rf "${BUILD_DIR}/${cwd}"
