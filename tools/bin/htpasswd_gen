#!/usr/bin/env perl
use warnings;
use strict;
use Getopt::Long;
use Term::ReadKey;
use File::Slurp;

use Readonly;
Readonly my @SALT_CHARACTERS    => ( 'a'..'z', 'A'..'Z' );
Readonly my $SALT_LENGTH        => 2;

my $htpasswd_file;
GetOptions(
    'f|file=s'  => \$htpasswd_file,
) or die 'Invalid options';
$htpasswd_file or die '--file is a required option';

# read htpasswd file entries
# assumes one line = one entry
my @htpasswd_entries = -e $htpasswd_file ? read_file($htpasswd_file) : ();
my %usernames = map { chomp; split /:/, $_, 2 } @htpasswd_entries;


# read new username and password
print "Enter username: ";
chomp (my $username = <STDIN>);

print "Enter password: ";
ReadMode('noecho');
chomp (my $raw_password = <STDIN>);
ReadMode(0);
print "\n";


# build a random salt.
# crypt only uses first 12 bits, should change to a better algorithm
my $random_salt = join '', @SALT_CHARACTERS[ map { rand @SALT_CHARACTERS } 1..$SALT_LENGTH ];

# hash password
my $encrypted_password = crypt($raw_password, $random_salt);
$usernames{$username} = $encrypted_password;

# write passwords back to htpasswd file
open my $fh, '>', $htpasswd_file or die "Could not open '$htpasswd_file': $!";
print $fh "$_:$usernames{$_}\n" foreach keys %usernames;
close $fh;

=head1 NAME

htpasswd_gen - set or update an username/password combination in a htpasswd file

=head1 SYNOPSIS

htpasswd_gen --file htpasswd

=cut